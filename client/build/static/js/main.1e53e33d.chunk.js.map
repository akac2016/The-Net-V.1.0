{"version":3,"sources":["Net/Point.ts","Net/Coordinates.ts","Net/InterviewNode.ts","Net/InterviewGraph.ts","Net/InterviewGraphFactory.ts","Net/Mouse.ts","Net/InterviewDisplay.tsx","Net/Net.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Point","x","y","this","other","Coordinates","n","scale","point","getX","screenOrigin","worldOrigin","getY","ScaleMultiplier","InterviewNode","id","center","radius","edges","wasSelected","context","beginPath","worldPosition","screenToWorldPoint","arc","scaleValue","fillStyle","fill","closePath","node","otherWorldPosition","moveTo","lineTo","strokeStyle","lineWidth","stroke","equals","push","distanceFromCenter","Math","sqrt","Axios","get","response","data","InterviewGraph","graphData","nodes","tree","pointMapping","idMapping","kdTree","distanceFunction","Map","getCachedNodes","connectCachedNodes","Object","keys","nodeData","select","set","insert","adjacencyData","srcNode","Error","connectionID","connectionNode","connect","a","b","Number","POSITIVE_INFINITY","pow","getCenter","drawEdges","draw","length","getId","toJson","getEdges","map","JSON","stringify","intersects","InterviewGraphFactory","canvasSize","interviews","graph","generateNodes","generateEdges","size","addNode","createNode","getRandomPoint","getRandomValueInRange","hasVertexIntersection","max","floor","random","createNearestConnections","connectSoloNodes","mapping","getPointMapping","getKDTree","vertexes","nearestNeighbors","nearest","nearestNeighbor","toConnect","undefined","hasEdge","parent","i","find","edge","union","console","log","index","xset","yset","Mouse","screenPostion","button","Buttons","Left","isDown","left","Right","right","InterviewDisplay","props","className","onClick","closeHandler","title","imageSource","src","alt","text","React","Component","Net","canvas","window","localStorage","getItem","parse","handleMouseWheel","bind","handleMouseMove","handleWindowResize","hideInterview","state","showInterview","getInterviewGraphData","getCanvas","getContext","getCanvasSize","setCanvasSize","initializeListeners","graphFactory","create","setItem","toString","dummyData","refs","innerWidth","innerHeight","width","height","addEventListener","touchHandler","event","first","changedTouches","type","simulatedEvent","document","createEvent","initMouseEvent","screenX","screenY","clientX","clientY","target","dispatchEvent","preventDefault","stopImmediatePropagation","deltaY","setScale","min","getScale","setWorldOrigin","getWorldPosition","setScreenOrigin","getScreenPosition","setWorldPosition","handleMouseDown","setMouseButtonUp","lastPosition","updateMousePosition","isMouseButtonDown","updateCoordinates","eventPoint","getClickPoint","setMouseButtonDown","boundingRect","getBoundingClientRect","setScreenPosition","top","getWorldOrigin","pos","worldToScreenPoint","clearRect","save","restore","setState","ref","App","showSlide1","showSlide2","showSlide3","showSlide4","showSlide5","showSlide6","showNet","skip","setTimeout","keyCode","hideSlide1","hideSlide2","hideSlide3","hideSlide4","hideSlide5","hideSlide6","CSSTransition","in","classNames","unmountOnExit","timeout","onEnter","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e53e33d.chunk.js","sourcesContent":["export default class Point {\n    private x : number;\n    private y : number;\n\n    constructor(x : number, y : number) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public getX() : number {\n        return this.x;\n    }\n\n    public getY() : number {\n        return this.y;\n    }\n\n    public equals(other : Point) : boolean {\n        return this.x === other.x && this.y === other.y;\n    }\n}","import Point from \"./Point\";\n\nexport class Coordinates {\n    public static ScaleMultiplier : number = 1.1;\n    private static worldOrigin : Point = new Point(0, 0);\n    private static screenOrigin : Point = new Point(0, 0);\n    private static scale : number = 0.5;\n\n    public static scaleValue(n : number) : number {\n        return n / Coordinates.scale;\n    }\n\n    public static screenToWorldPoint(point : Point) : Point {\n        return new Point(\n            (point.getX() - Coordinates.screenOrigin.getX()) * (1 / Coordinates.scale) + Coordinates.worldOrigin.getX(),\n            (point.getY() - Coordinates.screenOrigin.getY()) * (1 / Coordinates.scale) + Coordinates.worldOrigin.getY()\n        )\n    }\n\n    public static worldToScreenPoint(point : Point) : Point {\n        return new Point(\n            (point.getX() - Coordinates.worldOrigin.getX()) * Coordinates.scale + Coordinates.screenOrigin.getX(),\n            (point.getY() - Coordinates.worldOrigin.getY()) * Coordinates.scale + Coordinates.screenOrigin.getY()\n        )\n    }\n\n    public static setScale(scale : number) {\n        Coordinates.scale = scale;\n    }\n\n    public static getScale() : number {\n        return Coordinates.scale;\n    }\n\n    public static setWorldOrigin(point : Point) {\n        Coordinates.worldOrigin = point;\n    }\n\n    public static getWorldOrigin() {\n        return Coordinates.worldOrigin;\n    }\n\n    public static setScreenOrigin(point : Point) {\n        Coordinates.screenOrigin = point;\n    }\n\n    public static getScreenOrigin() {\n        return Coordinates.screenOrigin;\n    }\n}","import Point from \"./Point\";\nimport Axios from \"axios\";\nimport Interview from \"./Interview\";\nimport { Coordinates } from \"./Coordinates\";\n\nconst Margin : number = 30\n\nexport default class InterviewNode {\n    private id : string;\n    private center : Point;\n    private radius : number;\n    private edges : InterviewNode[];\n    private wasSelected : boolean;\n\n    constructor(id : string, center : Point, radius : number) {\n        this.id = id;\n        this.center = center;\n        this.radius = radius;\n        this.edges = [];\n        this.wasSelected = false;\n    }\n\n    public toJson() : string {\n        const json : any = {\n            id: this.id,\n            center: this.center,\n            radius: this.radius,\n            wasSelected: this.wasSelected\n        }\n        return json;\n    }\n\n    public draw(context : CanvasRenderingContext2D) {\n        context.beginPath();\n        const worldPosition = Coordinates.screenToWorldPoint(this.center);\n        context.arc(\n            worldPosition.getX(), \n            worldPosition.getY(),\n            Coordinates.scaleValue(this.radius),\n            0,\n            360\n        );\n        if (!this.wasSelected) {\n            context.fillStyle = \"white\";\n        } else {\n            context.fillStyle = \"#FFE591\";\n        }\n        context.fill();\n        context.closePath();\n    }\n\n    public select() {\n        this.wasSelected = true;\n    }\n\n    public drawEdges(context : CanvasRenderingContext2D) {\n        for (let node of this.edges) {\n            context.beginPath()\n            const worldPosition = Coordinates.screenToWorldPoint(this.center);\n            const otherWorldPosition = Coordinates.screenToWorldPoint(node.center);\n            context.moveTo(worldPosition.getX(), worldPosition.getY());\n            context.lineTo(otherWorldPosition.getX(), otherWorldPosition.getY());\n            context.strokeStyle = \"rgb(230, 230, 230)\";\n            context.lineWidth = Coordinates.scaleValue(1.75);\n            context.stroke();\n            context.closePath();\n        }\n    }\n\n    public getEdges() : InterviewNode[] {\n        return this.edges;\n    }\n\n    public hasEdge(other: InterviewNode) : boolean {\n        for (let edge of this.edges) {\n            if (edge.center.equals(other.center)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public getCenter() : Point {\n        return this.center;\n    }\n\n    public connect(node : InterviewNode) {\n        this.edges.push(node);\n    }\n\n    public intersects(point : Point) : boolean {\n        return this.distanceFromCenter(point) <= this.radius + this.radius + Margin;\n    }\n\n    private distanceFromCenter(point : Point) {\n        return Math.sqrt(((point.getX() - this.center.getX()) * (point.getX() - this.center.getX())) +\n                ((point.getY() - this.center.getY()) * (point.getY() - this.center.getY())))\n    }\n\n    public async getInterview() : Promise<Interview> {\n        const response = await Axios.get(`/path/to/interview/${this.id}`);\n        return response.data as Interview;\n    }\n\n    public getId() : string {\n        return this.id;\n    }\n}","import InterviewNode from \"./InterviewNode\";\nimport Point from \"./Point\";\nimport src from \"*.bmp\";\ndeclare var kdTree: any;\n\nexport default class InterviewGraph {\n    private nodes : InterviewNode[];\n    private tree : any;\n    private pointMapping : Map<Point, InterviewNode>\n    private idMapping : Map<string, InterviewNode>;\n\n    constructor(graphData? : any) {\n        this.nodes = [];\n        this.tree = new kdTree([], this.distanceFunction, [\"x\", \"y\"]);\n        this.pointMapping = new Map<Point, InterviewNode>();\n        this.idMapping = new Map<string, InterviewNode>();\n        if (graphData) {\n            this.nodes = this.getCachedNodes(graphData);\n            this.connectCachedNodes(graphData);\n        }\n    }\n\n    private getCachedNodes(graphData : any) : InterviewNode[] {\n        const nodes : InterviewNode[] = [];\n        for (let id of Object.keys(graphData.nodeData)) {\n            const center : Point = new Point(\n                graphData.nodeData[id].center.x,\n                graphData.nodeData[id].center.y\n            )\n            const node : InterviewNode = new InterviewNode(id, center, graphData.nodeData[id].radius);\n            if (graphData.nodeData[id].wasSelected) {\n                node.select();\n            }\n            this.pointMapping.set(center, node);\n            this.tree.insert(center);\n            nodes.push(node);\n            this.idMapping.set(id, node);\n        }\n        return nodes;\n    }\n\n    private connectCachedNodes(graphData : any) {\n        for (let id of Object.keys(graphData.adjacencyData)) {\n            const srcNode : InterviewNode | undefined = this.idMapping.get(id);\n            if (!srcNode) {\n                throw new Error(\"Could not find node with id: \" + id);\n            }\n            for (let connectionID of graphData.adjacencyData[id]) {\n                const connectionNode = this.idMapping.get(connectionID);\n                if (!connectionNode) {\n                    throw new Error(\"Could not find node with id: \" + id);\n                }\n                srcNode.connect(connectionNode);\n            }\n        }\n    }\n\n    private distanceFunction(a : any, b: any) {\n        if (a.x === b.x && a.x === b.x) {\n            return Number.POSITIVE_INFINITY;\n        }\n        return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n    }\n\n    public addNode(node : InterviewNode) {\n        this.pointMapping.set(node.getCenter(), node);\n        this.tree.insert(node.getCenter());\n        this.nodes.push(node);\n    }\n\n    public draw(context : CanvasRenderingContext2D) {\n        for (let node of this.nodes) {\n            node.drawEdges(context);\n        }\n        for (let node of this.nodes) {\n            node.draw(context);\n        }\n    }\n\n    public size() : number {\n        return this.nodes.length;\n    }\n\n    public vertexes() : InterviewNode[] {\n        return this.nodes;\n    }\n\n    public getKDTree() : any {\n        return this.tree;\n    }\n\n    public getPointMapping() : Map<Point, InterviewNode> {\n        return this.pointMapping;\n    }\n\n    public toString() : string {\n        const adjacencyData : any = {};\n        const nodeData : any = {}\n        for (let node of this.nodes) {\n            nodeData[node.getId()] = node.toJson();\n            adjacencyData[node.getId()] = node.getEdges().map((x : InterviewNode) => x.getId());\n        }\n        return JSON.stringify({\n            nodeData,\n            adjacencyData\n        });\n    }\n\n    public hasVertexIntersection(point : Point) : boolean {\n        for (let node of this.nodes) {\n            if (node.intersects(point)) {\n                return true;\n            }\n        }\n        return false;\n    } \n}","import InterviewGraph from \"./InterviewGraph\";\nimport InterviewNode from \"./InterviewNode\";\nimport Point from \"./Point\";\n\nconst Radius : number = 7;\nconst Margin : number = 5;\nconst MaxDistance : number = 200;\nconst NearestNeighborCount : number = 3;\n\nexport default class InterviewGraphFactory {\n    private canvasSize : Point;\n\n    constructor(canvasSize: Point) {\n        this.canvasSize = canvasSize;\n    }\n\n    public create(interviews : string[]) : InterviewGraph {\n        const graph : InterviewGraph = new InterviewGraph();\n        this.generateNodes(graph, interviews);\n        this.generateEdges(graph);\n        return graph;\n    }\n\n    private generateNodes(graph : InterviewGraph, interviews : string[]) {\n        while (graph.size() < interviews.length) {\n            graph.addNode(this.createNode(graph, interviews[graph.size()]));\n        }\n    }\n\n    private createNode(graph : InterviewGraph, id : string) : InterviewNode {\n        return new InterviewNode(id, this.getRandomPoint(graph), Radius);\n    }\n\n    private getRandomPoint(graph : InterviewGraph) : Point {\n        let x : number = this.getRandomValueInRange(this.canvasSize.getX())\n        let y : number = this.getRandomValueInRange(this.canvasSize.getY())\n        let point : Point = new Point(x, y);\n        while (graph.hasVertexIntersection(point)) {\n            x = this.getRandomValueInRange(this.canvasSize.getX())\n            y = this.getRandomValueInRange(this.canvasSize.getY())\n            point = new Point(x, y);\n        }\n        return point;\n    }\n\n    private getRandomValueInRange(max : number) : number {\n        return Math.floor(Math.random() * ((max - Radius - Margin) - Radius + 1)) + (Radius + Margin);\n    }\n\n    private generateEdges(graph : InterviewGraph) {\n        this.createNearestConnections(graph);\n        this.connectSoloNodes(graph);\n        // Todo\n        // this.connectDisjointSets(graph);\n    }\n\n    private createNearestConnections(graph : InterviewGraph) {\n        const mapping : Map<Point, InterviewNode> = graph.getPointMapping();\n        const kdTree : any = graph.getKDTree();\n        for (let node of graph.vertexes()) {\n            const nearestNeighbors = kdTree.nearest(node.getCenter(), NearestNeighborCount, [MaxDistance]);\n            for (let nearestNeighbor of nearestNeighbors) {\n                let toConnect : InterviewNode | undefined = mapping.get(nearestNeighbor[0]);\n                if (toConnect !== undefined && !node.hasEdge(toConnect)) {\n                    node.connect(toConnect);\n                } else {\n                    throw new Error(\"Could not find a mapping to the node at the nearest neighbor\")\n                }\n            }\n        }\n    }\n\n    private connectSoloNodes(graph : InterviewGraph) {\n        for (let node of graph.vertexes()) {\n            if (node.getEdges().length === 0) {\n                let nearestNeighbor = graph.getKDTree().nearest(node.getCenter(), 1)\n                node.connect(graph.getPointMapping().get(nearestNeighbor[0][0]) as InterviewNode);\n            }\n        }\n    }\n\n    private connectDisjointSets(graph : InterviewGraph) {\n        const parent : string[] = [];\n        const idMapping : Map<string, number> = new Map<string, number>();\n        for (let i = 0; i < graph.size(); i++) {\n            parent[i] = \"\";\n            idMapping.set(graph.vertexes()[i].getId(), i);\n        }\n        for (let node of graph.vertexes()) {\n            const a: string = this.find(parent, node.getId(), idMapping);\n            for (let edge of node.getEdges()) {\n                const b: string = this.find(parent, edge.getId(), idMapping);\n                this.union(parent, a, b, idMapping);\n            }\n        }\n        console.log(parent);\n    }\n\n    private find(parent : string[], id : string, idMapping : Map<string, number>) : string {\n        if (idMapping.get(id) === undefined) {\n            throw new Error(\"Unknown interview id\");\n        }\n        const index = idMapping.get(id) as number\n        console.log(index, parent[index]);\n        if (parent[index] === \"\" || parent[index] === id) {\n            return id;\n        }\n        return this.find(parent, parent[index], idMapping);\n    }\n\n    private union(parent : string[], x : string, y : string, idMapping : Map<string, number>) {\n        const xset : number = idMapping.get(this.find(parent, x, idMapping)) as number;\n        const yset : string = this.find(parent, y, idMapping)\n        parent[xset] = yset;\n    }\n}","import Point from \"./Point\";\n\nexport class Mouse {\n    public static Buttons = {\n        Left: 0,\n        Right: 1,\n    }\n\n    private static screenPostion : Point = new Point(0, 0);\n    private static worldPosition : Point = new Point(0, 0);\n    private static isDown = {\n        left: false,\n        right: false\n    }\n\n    public static getScreenPosition() {\n        return Mouse.screenPostion;\n    }\n\n    public static setScreenPosition(point : Point) {\n        Mouse.screenPostion = point;\n    }\n\n    public static getWorldPosition() {\n        return Mouse.worldPosition;\n    }\n\n    public static setWorldPosition(point : Point) {\n        Mouse.worldPosition = point;\n    }\n\n    public static isMouseButtonDown(button : number) {\n        if (button === this.Buttons.Left) {\n            return this.isDown.left;\n        }\n        if (button === this.Buttons.Right) {\n            return this.isDown.right;\n        }\n        return false;\n    }\n\n    public static setMouseButtonDown(button : number) {\n        if (button === this.Buttons.Left) {\n            Mouse.isDown.left = true;\n        }\n        if (button === this.Buttons.Right) {\n            Mouse.isDown.right = true;\n        }\n    }\n\n    public static setMouseButtonUp(button : number) {\n        if (button === this.Buttons.Left) {\n            Mouse.isDown.left = false;\n        }\n        if (button === this.Buttons.Right) {\n            Mouse.isDown.right = false;\n        }\n    }\n}","import React from \"react\";\nimport \"./InterviewDisplay.css\";\n\ninterface IProps {\n    title: string;\n    text: string;\n    closeHandler: () => void;\n    imageSource?: string;\n}\n\nexport default class InterviewDisplay extends React.Component<IProps, {}> {\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    public render() {\n        return (\n            <div className=\"interview-modal\">\n                <div className=\"interview-container\">\n                    <button onClick={this.props.closeHandler}>X</button>\n                    <h1>{this.props.title}</h1>\n                    { this.props.imageSource ? <img src={this.props.imageSource} alt=\"Interview Photo\"></img> : null}\n                    <p>{this.props.text}</p>\n                </div>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport './Net.css';\nimport Point from \"./Point\";\nimport InterviewGraph from \"./InterviewGraph\";\nimport InterviewGraphFactory from \"./InterviewGraphFactory\";\nimport { Mouse } from \"./Mouse\";\nimport { Coordinates } from \"./Coordinates\";\nimport InterviewDisplay from \"./InterviewDisplay\";\n// import Axios from \"axios\";\n\ninterface IState {\n    canvas: HTMLCanvasElement | null;\n    context: CanvasRenderingContext2D | null;\n    interviews: string[];\n    showInterview: boolean;\n}\n\nexport default class Net extends React.Component<{}, IState> {\n    context : CanvasRenderingContext2D | null;\n    canvas : HTMLCanvasElement | null;\n    graph: InterviewGraph | null;\n    interviews: string[];\n\n    constructor(props : any) {\n        super(props);\n        this.context = null;\n        this.canvas = null;\n        this.graph = null;\n        this.interviews = [];\n        if (window.localStorage.getItem(\"graph\")) {\n            const graphData = JSON.parse(window.localStorage.getItem(\"graph\") as string); \n            this.graph = new InterviewGraph(graphData)\n        }\n        this.handleMouseWheel = this.handleMouseWheel.bind(this);\n        this.handleMouseMove = this.handleMouseMove.bind(this);\n        this.handleWindowResize = this.handleWindowResize.bind(this);\n        this.hideInterview = this.hideInterview.bind(this);\n        this.draw = this.draw.bind(this);\n\n        this.state = {\n            showInterview: false,\n            canvas: null,\n            context: null,\n            interviews: [],\n        }\n    }\n\n    public async componentDidMount() {\n        this.interviews = await this.getInterviewGraphData();\n        if (this.canvas === null) {\n            this.canvas = this.getCanvas();\n        }\n        if (this.context === null) {\n            this.context = this.getContext();\n        }\n        const canvasSize : Point = this.getCanvasSize();\n        this.setCanvasSize(canvasSize);\n        this.initializeListeners();\n        if (this.graph === null) {\n            const graphFactory : InterviewGraphFactory = new InterviewGraphFactory(canvasSize);\n            this.graph = graphFactory.create(this.interviews);\n            window.localStorage.setItem(\"graph\", this.graph.toString());\n        }\n        this.draw()\n    }\n\n    private async getInterviewGraphData() : Promise<string[]> {\n        // const response = await Axios.get(\"/path/to/interview/graph/data\");\n        const dummyData : string[] = [];\n        for (let i = 0; i < 300; i++) {\n            dummyData.push(i.toString());\n        }\n        return dummyData;\n        // return response.data as string[];\n    }\n\n    private getCanvas() : HTMLCanvasElement {\n        return this.refs.canvas as HTMLCanvasElement;\n    }\n\n    private getCanvasSize() : Point {\n        return new Point(\n            window.innerWidth > 1000 ? window.innerWidth * (1 + Math.floor(this.interviews.length / 1000))\n                : 1000 * (1 + Math.floor(this.interviews.length / 1000)), \n            window.innerHeight > 1000 ? window.innerHeight * (1 + Math.floor(this.interviews.length / 1000))\n                : 1000 * (1 + Math.floor(this.interviews.length / 1000)), \n        );\n    }\n\n    private setCanvasSize(point : Point) {\n        if (this.canvas == null) {\n            throw new Error(\"Canvas has not been mounted yet\");\n        }\n        this.canvas.width = point.getX();\n        this.canvas.height = point.getY();\n    }\n\n    private getContext() : CanvasRenderingContext2D {\n        if (this.canvas == null) {\n            throw new Error(\"Canvas has not been mounted yet\");\n        }\n        const context : CanvasRenderingContext2D | null = this.canvas.getContext(\"2d\");\n        if (context == null) {\n            throw new Error(\"Failed to fetch rendering context for the net\");\n        }\n        return context;\n    }\n\n    private initializeListeners() {\n        if (this.canvas === null) {\n            throw new Error(\"Canvas has not been mounted yet\");\n        }\n        this.canvas.addEventListener(\"touchstart\", this.touchHandler, true);\n        this.canvas.addEventListener(\"touchmove\", this.touchHandler, true);\n        this.canvas.addEventListener(\"touchend\", this.touchHandler, true);\n        this.canvas.addEventListener(\"touchcancel\", this.touchHandler, true); \n        this.canvas.addEventListener(\"wheel\", this.handleMouseWheel);\n        this.canvas.addEventListener(\"mousedown\", this.handleMouseMove);\n        this.canvas.addEventListener(\"mouseup\", this.handleMouseMove);\n        this.canvas.addEventListener(\"mouseover\", this.handleMouseMove);\n        this.canvas.addEventListener(\"mouseout\", this.handleMouseMove);\n        this.canvas.addEventListener(\"mousemove\", this.handleMouseMove);\n        window.addEventListener(\"resize\", this.handleWindowResize);\n    }\n\n    private touchHandler(event: TouchEvent) {\n        let touches = event.changedTouches,\n            first = touches[0],\n            type = \"\";\n        switch(event.type)\n        {\n            case \"touchstart\": type = \"mousedown\"; break;\n            case \"touchmove\":  type = \"mousemove\"; break;        \n            case \"touchend\":   type = \"mouseup\";   break;\n            default:           return;\n        }\n\n        // initMouseEvent(type, canBubble, cancelable, view, clickCount, \n        //                screenX, screenY, clientX, clientY, ctrlKey, \n        //                altKey, shiftKey, metaKey, button, relatedTarget);\n\n        var simulatedEvent = document.createEvent(\"MouseEvent\");\n        simulatedEvent.initMouseEvent(type, true, true, window, 1, \n                                    first.screenX, first.screenY, \n                                    first.clientX, first.clientY, false, \n                                    false, false, false, 0/*left*/, null);\n\n        first.target.dispatchEvent(simulatedEvent);\n        event.preventDefault();\n    }\n\n    private handleMouseWheel(event : WheelEvent) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        if (event.deltaY > 0) {\n            Coordinates.setScale(Math.min(1.5, Coordinates.getScale() * Coordinates.ScaleMultiplier));\n        } else {\n            Coordinates.setScale(Math.max(0.3, Coordinates.getScale() * (1 / Coordinates.ScaleMultiplier)));\n        }\n        Coordinates.setWorldOrigin(Mouse.getWorldPosition());\n        Coordinates.setScreenOrigin(Mouse.getScreenPosition())\n        Mouse.setWorldPosition(Coordinates.screenToWorldPoint(Mouse.getScreenPosition()));\n        this.draw()\n    }\n\n    private handleMouseMove(event : MouseEvent) {\n        if (event.type === \"mousedown\") {\n            this.handleMouseDown(event);\n        }\n        if (event.type === \"mouseover\" || event.type === \"mouseout\" || event.type === \"mouseup\") {\n            Mouse.setMouseButtonUp(Mouse.Buttons.Left);\n        }\n        const lastPosition = this.updateMousePosition(event);\n        if (Mouse.isMouseButtonDown(Mouse.Buttons.Left)) {\n            this.updateCoordinates(lastPosition);\n        }\n        this.draw();\n    }\n\n    private handleMouseDown(event : MouseEvent) {\n        if (this.graph == null) {\n            throw new Error(\"Graph not generated yet\");\n        }\n        const eventPoint : Point = this.getClickPoint(event);\n        const nearestNeighbor = this.graph.getKDTree().nearest(eventPoint, 1, [Coordinates.scaleValue(7)]);\n        if (nearestNeighbor && nearestNeighbor.length !== 0) {\n            this.graph.getPointMapping().get(nearestNeighbor[0][0])?.select();\n            this.showInterview();\n            window.localStorage.setItem(\"graph\", this.graph.toString());\n        }\n        Mouse.setMouseButtonDown(Mouse.Buttons.Left);\n    }\n\n    private updateMousePosition(event : MouseEvent) {\n        if (this.canvas) {\n            const boundingRect : DOMRect | undefined = this.canvas.getBoundingClientRect();\n            console.log(event.clientX, event.clientY);\n            Mouse.setScreenPosition(new Point(\n                event.clientX - boundingRect.left,\n                event.clientY - boundingRect.top\n            ));\n            const lastPosition = new Point(\n                Mouse.getWorldPosition().getX(),\n                Mouse.getWorldPosition().getY(),\n            );\n            Mouse.setWorldPosition(Coordinates.screenToWorldPoint(Mouse.getScreenPosition()));\n            return lastPosition;\n        }\n        return new Point(0, 0);\n    }\n\n    private updateCoordinates(lastPosition : Point) {\n        Coordinates.setWorldOrigin(new Point(\n            Coordinates.getWorldOrigin().getX() + (Mouse.getWorldPosition().getX() - lastPosition.getX()),\n            Coordinates.getWorldOrigin().getY() + (Mouse.getWorldPosition().getY() - lastPosition.getY()),\n        ))\n        Mouse.setWorldPosition(Coordinates.screenToWorldPoint(Mouse.getScreenPosition()));\n    }\n\n    private handleWindowResize() {\n        const canvasSize : Point = this.getCanvasSize();\n        this.setCanvasSize(canvasSize);\n        this.draw();\n    }\n\n    private getClickPoint(event : MouseEvent) : Point {\n        if (this.canvas === null) {\n            throw new Error(\"Canvas has not been mounted yet\");\n        }\n        const boundingRect : DOMRect | undefined = this.canvas.getBoundingClientRect();\n        if (boundingRect === undefined) {\n            throw new Error(\"Failed to get bounding rect of canvas\");\n        }\n        const pos = new Point(\n            event.clientX - boundingRect.left,\n            event.clientY - boundingRect.top\n        )\n        return Coordinates.worldToScreenPoint(pos);\n    }\n\n    private draw() {\n        if (this.graph == null) {\n            throw new Error(\"Graph not generted yet\");\n        }\n        if (this.context == null) {\n            throw new Error(\"Called draw before context has been retreived\");\n        }\n        this.context = this.getContext();\n        this.context.clearRect(0, 0, this.getCanvas().width, this.getCanvas().height);\n        this.context.save();\n        this.graph.draw(this.context);\n        this.context.restore();\n    }\n\n    public showInterview() {\n        this.setState({\n            showInterview: true\n        })\n    }\n\n    public hideInterview() {\n        this.setState({\n            showInterview: false\n        })\n    }\n\n    public render() {\n        return (\n            <div className=\"net-container\">\n                <div ref=\"nodeLayer\" id=\"node-layer\">\n                    <canvas ref=\"canvas\" id=\"net\"></canvas>\n                </div>\n                {this.state.showInterview ? <InterviewDisplay\n\t\t\t\t\ttitle={\"title\"}\n                    text={\"text\"}\n                    closeHandler={this.hideInterview}\n\t\t\t\t\timageSource={\"https://via.placeholder.com/500\"}></InterviewDisplay> : null}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { CSSTransition } from 'react-transition-group'\nimport './App.css';\nimport Net from './Net/Net';\n\n// TODO\n// Slideshow for beige slides\n// Add flashlight feature to net\n// Add a way to add \n// Way to add themselves to the net\n// Make Nodes appear 3D\n// Add animation to interactable elements\n\ninterface IState {\n\tshowSlide1: boolean,\n\tshowSlide2: boolean,\n\tshowSlide3: boolean,\n\tshowSlide4: boolean,\n\tshowSlide5: boolean,\n\tshowSlide6: boolean,\n\tshowNet: boolean,\n}\n\nexport default class App extends React.Component<{}, IState> {\n\tstate : IState\n\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\tshowSlide1: true,\n\t\t\tshowSlide2: false,\n\t\t\tshowSlide3: false,\n\t\t\tshowSlide4: false,\n\t\t\tshowSlide5: false,\n\t\t\tshowSlide6: false,\n\t\t\tshowNet: false,\n\t\t}\n\t\tthis.skip = this.skip.bind(this);\n\t\tdocument.addEventListener(\"keydown\", this.skip);\n\t}\n\n\tpublic async componentDidMount() {\n\t\tif (this.state.showSlide1) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.showSlide2()\n\t\t\t}, 5000);\n\t\t}\n\t}\n\n\tpublic skip(event : KeyboardEvent) {\n\t\tif (event.keyCode === 27) {\n\t\t\tthis.hideSlide1();\n\t\t\tthis.hideSlide2();\n\t\t\tthis.hideSlide3();\n\t\t\tthis.hideSlide4();\n\t\t\tthis.hideSlide5();\n\t\t\tthis.hideSlide6();\n\t\t\tthis.showNet();\n\t\t}\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<CSSTransition\n\t\t\t\t\tin={this.state.showSlide1}\n\t\t\t\t\tclassNames=\"slide-1\"\n\t\t\t\t\tunmountOnExit\n\t\t\t\t\ttimeout={2000}\n\t\t\t\t\t>\n\t\t\t\t\t<div className=\"slide-1\">\n\t\t\t\t\t\t<h1 className=\"slide-1-title\">Have you ever wondered if there is a meaning to life?</h1>\n\t\t\t\t\t</div>\n\t\t\t\t</CSSTransition>\n\t\t\t\t<CSSTransition\n\t\t\t\t\tin={this.state.showSlide2}\n\t\t\t\t\tclassNames=\"slide-2\"\n\t\t\t\t\tunmountOnExit\n\t\t\t\t\tonEnter={() => {this.hideSlide1()}}\n\t\t\t\t\ttimeout={2000}\n\t\t\t\t\t>\n\t\t\t\t\t<div onClick={() => this.showSlide3()} className=\"slide-2\">\n\t\t\t\t\t\t<h1 className=\"slide-2-title\">Welcome to the Net Project, Led by Ali Kapadia</h1>\n\t\t\t\t\t\t<h2 className=\"slide-2-subtitle\">Which uses philisophical research methods to collect individual outlooks on the meaning of life around the world</h2>\n\t\t\t\t\t\t<h4 className=\"click-to-contine\">Click To Continue...</h4>\n\t\t\t\t\t</div>\n\t\t\t\t</CSSTransition>\n\t\t\t\t<CSSTransition\n\t\t\t\t\tin={this.state.showSlide3}\n\t\t\t\t\tclassNames=\"slide-3\"\n\t\t\t\t\tunmountOnExit\n\t\t\t\t\tonEnter={() => {this.hideSlide2()}}\n\t\t\t\t\ttimeout={2000}\n\t\t\t\t\t>\n\t\t\t\t\t<div onClick={() => this.showSlide4()} className=\"slide-3\">\n\t\t\t\t\t\t<h1 className=\"slide-2-title\">Principle Explanation</h1>\n\t\t\t\t\t\t<h2 className=\"slide-2-subtitle\">Text that explains key philisophical principles</h2>\n\t\t\t\t\t\t<h4 className=\"click-to-contine\">Click To Continue...</h4>\n\t\t\t\t\t</div>\n\t\t\t\t</CSSTransition>\n\t\t\t\t<CSSTransition\n\t\t\t\t\tin={this.state.showSlide4}\n\t\t\t\t\tclassNames=\"slide-4\"\n\t\t\t\t\tunmountOnExit\n\t\t\t\t\tonEnter={() => {this.hideSlide3()}}\n\t\t\t\t\ttimeout={2000}\n\t\t\t\t\t>\n\t\t\t\t\t<div onClick={() => this.showSlide5()} className=\"slide-4\">\n\t\t\t\t\t\t<h1 className=\"slide-2-title\">Principle Explanation</h1>\n\t\t\t\t\t\t<h2 className=\"slide-2-subtitle\">Text that explains key philisophical principles</h2>\n\t\t\t\t\t\t<h4 className=\"click-to-contine\">Click To Continue...</h4>\n\t\t\t\t\t</div>\n\t\t\t\t</CSSTransition>\n\t\t\t\t<CSSTransition\n\t\t\t\t\tin={this.state.showSlide5}\n\t\t\t\t\tclassNames=\"slide-5\"\n\t\t\t\t\tunmountOnExit\n\t\t\t\t\tonEnter={() => {this.hideSlide4()}}\n\t\t\t\t\ttimeout={2000}\n\t\t\t\t\t>\n\t\t\t\t\t<div onClick={() => this.showSlide6()} className=\"slide-5\">\n\t\t\t\t\t\t<h1 className=\"slide-2-title\">Principle Explanation</h1>\n\t\t\t\t\t\t<h2 className=\"slide-2-subtitle\">Text that explains key philisophical principles</h2>\n\t\t\t\t\t\t<h4 className=\"click-to-contine\">Click To Continue...</h4>\n\t\t\t\t\t</div>\n\t\t\t\t</CSSTransition>\n\t\t\t\t<CSSTransition\n\t\t\t\t\tin={this.state.showSlide6}\n\t\t\t\t\tclassNames=\"slide-6\"\n\t\t\t\t\tunmountOnExit\n\t\t\t\t\tonEnter={() => {this.hideSlide5()}}\n\t\t\t\t\ttimeout={2000}\n\t\t\t\t\t>\n\t\t\t\t\t<div onClick={() => this.showNet()} className=\"slide-6\">\n\t\t\t\t\t\t<h1 className=\"slide-2-title\">Title that introduces the analogy...</h1>\n\t\t\t\t\t\t<h2 className=\"slide-2-subtitle\">Here will go text that explains the analogy</h2>\n\t\t\t\t\t\t<h4 className=\"click-to-contine\">Click To Enter...</h4>\n\t\t\t\t\t</div>\n\t\t\t\t</CSSTransition>\n\t\t\t\t{this.state.showNet ? <Net/> : null}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tpublic showSlide1() {\n\t\tthis.setState({\n\t\t\tshowSlide1: true\n\t\t})\n\t}\n\n\tpublic hideSlide1() {\n\t\tthis.setState({\n\t\t\tshowSlide1: false\n\t\t})\n\t}\n\n\tpublic showSlide2() {\n\t\tthis.setState({\n\t\t\tshowSlide2: true\n\t\t});\n\t}\n\n\tpublic hideSlide2() {\n\t\tthis.setState({\n\t\t\tshowSlide2: false\n\t\t})\n\t}\n\n\tpublic showSlide3() {\n\t\tthis.setState({\n\t\t\tshowSlide3: true\n\t\t})\n\t}\n\n\tpublic hideSlide3() {\n\t\tthis.setState({\n\t\t\tshowSlide3: false\n\t\t})\n\t}\n\n\tpublic showSlide4() {\n\t\tthis.setState({\n\t\t\tshowSlide4: true\n\t\t})\n\t}\n\n\tpublic hideSlide4() {\n\t\tthis.setState({\n\t\t\tshowSlide4: false\n\t\t})\n\t}\n\t\n\tpublic showSlide5() {\n\t\tthis.setState({\n\t\t\tshowSlide5: true\n\t\t})\n\t}\n\n\tpublic hideSlide5() {\n\t\tthis.setState({\n\t\t\tshowSlide5: false\n\t\t})\n\t}\n\n\tpublic showSlide6() {\n\t\tthis.setState({\n\t\t\tshowSlide6: true\n\t\t})\n\t}\n\n\tpublic hideSlide6() {\n\t\tthis.setState({\n\t\t\tshowSlide6: false\n\t\t})\n\t}\n\n\tpublic showNet() {\n\t\tthis.hideSlide6();\n\t\tthis.setState({\n\t\t\tshowNet: true\n\t\t})\n\t}\n\n\tpublic hideNet() {\n\t\tthis.setState({\n\t\t\tshowNet: false\n\t\t});\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}